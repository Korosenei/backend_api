# Generated by Django 5.1.7 on 2025-05-26 18:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Departement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=255, unique=True, verbose_name='Nom du département')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('status', models.BooleanField(default=True, verbose_name='Actif')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
            ],
            options={
                'verbose_name': 'Département',
                'verbose_name_plural': 'Départements',
            },
        ),
        migrations.CreateModel(
            name='Domaine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=255, unique=True, verbose_name="Domaine d'intervention")),
                ('experience', models.IntegerField(help_text="Durée d'expérience minimale dans ce domaine", verbose_name='Expérience requise (années)')),
                ('status', models.BooleanField(default=True, verbose_name='Actif')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
            ],
            options={
                'verbose_name': 'Domaine',
                'verbose_name_plural': 'Domaines',
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=50, unique=True, verbose_name='Nom du grade')),
                ('status', models.BooleanField(default=True, verbose_name='Actif')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
            ],
            options={
                'verbose_name': 'Grade',
                'verbose_name_plural': 'Grades',
            },
        ),
        migrations.CreateModel(
            name='TypeEnseignant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=255, unique=True, verbose_name="Type d'enseignant")),
                ('status', models.BooleanField(default=True, verbose_name='Actif')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
            ],
            options={
                'verbose_name': "Type d'enseignant",
                'verbose_name_plural': "Types d'enseignants",
            },
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse email')),
                ('role', models.CharField(choices=[('SUPER_ADMIN', 'Super Administrateur'), ('ADMIN', 'Administrateur'), ('ENSEIGNANT', 'Enseignant'), ('CHEF_DEPARTEMENT', 'Chef de Département'), ('APPRENANT', 'Apprenant')], default='APPRENANT', max_length=20, verbose_name='Rôle dans le système')),
                ('is_active', models.BooleanField(default=True, verbose_name='Compte actif')),
                ('profile_object_id', models.UUIDField(blank=True, null=True, verbose_name='ID du profil')),
                ('groups', models.ManyToManyField(blank=True, help_text='Les groupes auxquels appartient cet utilisateur.', related_name='utilisateurs', to='auth.group', verbose_name='groupes')),
                ('profile_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype', verbose_name='Type de profil')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Permissions spécifiques pour cet utilisateur.', related_name='utilisateurs', to='auth.permission', verbose_name='permissions utilisateur')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Apprenant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('matricule', models.CharField(max_length=255, unique=True, verbose_name='Matricule')),
                ('photo', models.FileField(blank=True, null=True, upload_to='apprenants/photos/', verbose_name='Photo de profil')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom')),
                ('prenom', models.CharField(max_length=255, verbose_name='Prénom')),
                ('sexe', models.CharField(choices=[('H', 'Homme'), ('F', 'Femme'), ('A', 'Autre')], max_length=1, verbose_name='Sexe')),
                ('date_de_naissance', models.DateField(verbose_name='Date de naissance')),
                ('telephone', models.CharField(max_length=255, verbose_name='Téléphone')),
                ('personne_a_prevenir', models.CharField(max_length=255, verbose_name="Personne à prévenir en cas d'urgence")),
                ('numero_prevention', models.CharField(max_length=255, verbose_name="Numéro à contacter en cas d'urgence")),
                ('frais_paye', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Frais payés')),
                ('status', models.BooleanField(default=True, verbose_name='Actif')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
                ('utilisateur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profil_apprenant', to=settings.AUTH_USER_MODEL, verbose_name='Compte utilisateur associé')),
                ('departement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='apprenants', to='_users.departement', verbose_name="Département d'affiliation")),
            ],
            options={
                'verbose_name': 'Apprenant',
                'verbose_name_plural': 'Apprenants',
            },
        ),
        migrations.CreateModel(
            name='Enseignant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('matricule', models.CharField(max_length=255, unique=True, verbose_name='Matricule')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom')),
                ('prenom', models.CharField(max_length=255, verbose_name='Prénom')),
                ('date_de_naissance', models.DateField(verbose_name='Date de naissance')),
                ('sexe', models.CharField(choices=[('H', 'Homme'), ('F', 'Femme'), ('A', 'Autre')], max_length=1, verbose_name='Sexe')),
                ('telephone', models.CharField(max_length=255, verbose_name='Téléphone')),
                ('piece_identite', models.FileField(blank=True, null=True, upload_to='enseignants/pieces_identite/', verbose_name="Pièce d'identité")),
                ('photo', models.FileField(blank=True, null=True, upload_to='enseignants/photos/', verbose_name='Photo de profil')),
                ('status', models.BooleanField(default=True, verbose_name='Actif')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
                ('departements', models.ManyToManyField(blank=True, related_name='enseignants', to='_users.departement', verbose_name='Départements où enseigne')),
                ('domaine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='_users.domaine', verbose_name='Domaine de spécialisation')),
                ('utilisateur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profil_enseignant', to=settings.AUTH_USER_MODEL, verbose_name='Compte utilisateur associé')),
                ('grade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='_users.grade', verbose_name='Grade académique')),
                ('type_enseignant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='_users.typeenseignant', verbose_name="Type d'enseignant")),
            ],
            options={
                'verbose_name': 'Enseignant',
                'verbose_name_plural': 'Enseignants',
            },
        ),
        migrations.CreateModel(
            name='ChefDepartement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_nomination', models.DateField(auto_now_add=True, verbose_name='Date de nomination')),
                ('status', models.BooleanField(default=True, verbose_name='Actif')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_update', models.DateTimeField(auto_now=True, verbose_name='Date de mise à jour')),
                ('departement', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='chef', to='_users.departement', verbose_name='Département dirigé')),
                ('enseignant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='departement_dirige', to='_users.enseignant', verbose_name='Enseignant chef de département')),
            ],
            options={
                'verbose_name': 'Chef de département',
                'verbose_name_plural': 'Chefs de département',
                'constraints': [models.UniqueConstraint(fields=('departement',), name='unique_chef_par_departement'), models.UniqueConstraint(fields=('enseignant',), name='unique_departement_par_chef')],
            },
        ),
    ]
